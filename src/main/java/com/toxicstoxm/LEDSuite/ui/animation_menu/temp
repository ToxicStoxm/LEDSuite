/**
     * Tries to construct an animation menu from the given YAML string. All ui callbacks from the menu will be serialized and relayed to the server through the default callbackRelay specified when creating a new instance of this class with {@link #AnimationMenuConstructor(CallbackRelay)}
     * @param yamlString the YAML string to construct a menu from
     * @return the constructed {@link AnimationMenu}
     * @see #constructMenuFromYAML(String, CallbackRelay)
     * @see #constructGroupFromYAML(ConfigurationSection, CallbackRelay)
     * @see #constructWidgetFromYAML(ConfigurationSection, CallbackRelay)
     * @see #relayUICallbackToServer(String, String, CallbackRelay)
     */
    public AnimationMenu constructMenuFromYAML(String yamlString) {
        return constructMenuFromYAML(yamlString, defaultCallbackRelay);
    }

    /**
     * Tries to construct an animation menu from the given YAML string. All ui callbacks from the menu will be serialized and relayed to the server through the given callbackRelay using {@link #relayUICallbackToServer(String, String, CallbackRelay)}
     * @param yamlString the YAML string to construct a menu from
     * @param callbackRelay the callback relay to use to forward the ui callbacks to
     * @return the constructed {@link AnimationMenu}
     * @see #constructMenuFromYAML(String)
     * @see #constructGroupFromYAML(ConfigurationSection, CallbackRelay)
     * @see #constructWidgetFromYAML(ConfigurationSection, CallbackRelay)
     * @see #relayUICallbackToServer(String, String, CallbackRelay)
     */
    public AnimationMenu constructMenuFromYAML(@NotNull String yamlString, @NotNull CallbackRelay callbackRelay) throws PacketManager.DeserializationException {
        YamlConfiguration menuYaml = new YamlConfiguration();
        try {
            menuYaml.loadFromString(yamlString);
        } catch (InvalidConfigurationException e) {
            throw new PacketManager.DeserializationException("Failed to deserialize menu YAML!", e);
        }

        AnimationMenu animationMenu = AnimationMenu.create(String.valueOf(UUID.randomUUID()));

        for (String groupKey : menuYaml.getKeys(false)) {
            ConfigurationSection groupSection = menuYaml.getConfigurationSection(groupKey);
            if (groupSection == null) throw new PacketManager.DeserializationException("Wasn't able to correctly retrieve group section for top level group '" + groupKey + "'!", new NullPointerException("Top level group section is null!"));

            animationMenu.add(constructGroupFromYAML(groupSection, callbackRelay));

        }

        return animationMenu;
    }

    /**
     * Tries to construct a preferences group from the given YAML config section. All ui callbacks are relayed to the server using the specified callback relay.
     * @param groupSection the YAML section to construct the preferences group from
     * @param callbackRelay the callback relay to use to forward the ui callbacks to
     * @return the constructed preferences group
     * @throws PacketManager.DeserializationException if the YAML config section is missing required keys or is malformed.
     * @see #constructMenuFromYAML(String)
     * @see #constructMenuFromYAML(String, CallbackRelay)
     * @see #constructWidgetFromYAML(ConfigurationSection, CallbackRelay)
     * @see #relayUICallbackToServer(String, String, CallbackRelay)
     */
    protected PreferencesGroup constructGroupFromYAML(@NotNull ConfigurationSection groupSection, @NotNull CallbackRelay callbackRelay) throws PacketManager.DeserializationException {
        YamlTools.ensureKeyExists(Constants.Communication.YAML.Keys.MenuReply.LABEL, groupSection);
        PreferencesGroup group = PreferencesGroup.builder()
                .setTitle(Constants.Communication.YAML.Keys.MenuReply.LABEL)
                .build();

        YamlTools.ensureKeyExists(Constants.Communication.YAML.Keys.MenuReply.CONTENT, groupSection);
        ConfigurationSection groupContentSection = groupSection.getConfigurationSection(Constants.Communication.YAML.Keys.MenuReply.CONTENT);
        if (groupContentSection == null) throw new PacketManager.DeserializationException("Wasn't able to correctly retrieve group content section for group '" + group.getTitle() + "'!", new NullPointerException("Group content section is null!"));

        for (String groupContentItemKey : groupContentSection.getKeys(false)) {
            ConfigurationSection groupContentItemSection = groupContentSection.getConfigurationSection(groupContentItemKey);
            if (groupContentItemSection == null) throw new PacketManager.DeserializationException("Wasn't able to correctly retrieve group content item section for group content item '" + groupContentItemKey + "'!", new NullPointerException("Group content item section is null!"));
            if (groupContentItemSection.contains(Constants.Communication.YAML.Keys.MenuReply.CONTENT)) group.add(constructGroupFromYAML(groupContentItemSection, callbackRelay)); // if group content item is a subgroup
            else {
                group.add(constructWidgetFromYAML(groupContentItemSection, callbackRelay));
            }
        }

        return group;
    }

    /**
     * Tries to construct a widget from the given YAML config section. All ui callbacks are relayed to the server using the specified callback relay.
     * @param widgetSection the YAML section to construct the widget from
     * @param callbackRelay the callback relay to use to forward the ui callbacks to
     * @return the constructed widget
     * @throws PacketManager.DeserializationException if the YAML config section is missing required keys or is malformed.
     * @see #constructMenuFromYAML(String)
     * @see #constructMenuFromYAML(String, CallbackRelay)
     * @see #constructGroupFromYAML(ConfigurationSection, CallbackRelay)
     * @see #relayUICallbackToServer(String, String, CallbackRelay)
     */
    protected Widget constructWidgetFromYAML(@NotNull ConfigurationSection widgetSection, @NotNull CallbackRelay callbackRelay) throws PacketManager.DeserializationException {

        return null;
    }

    /**
     * Forwards the given ui callback represented by the object name or path and its new value using the given callback relay to the server.
     * @param objectName the name pointing to the menu object that changed
     * @param newValue the new value of the object specified by name
     * @param callbackRelay the callback relay to use for forwarding / relaying
     * @implNote uses {@link MenuChangeRequestPacket}
     */
    protected void relayUICallbackToServer(@NotNull String objectName, String newValue, @NotNull CallbackRelay callbackRelay) {
        if (!objectName.isBlank()) {
            var request = MenuChangeRequestPacket.builder().objectPath(objectName).build();
            if (newValue != null) request.setObjectValue(newValue);
            callbackRelay.enqueueMessage(
                    request.serialize()
            );
        } else LEDSuiteApplication.getLogger().warn("Callback relay was cancelled because object name (object path) was blank!", new LEDSuiteLogAreas.COMMUNICATION());
    }
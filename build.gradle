plugins {
    id 'java'
    id 'application'
    id 'org.beryx.jlink' version '3.0.1'
    id 'io.github.jwharm.flatpak-gradle-generator' version '1.2.0'
    id 'io.github.crimix.replace-placeholders' version '2.0'
}

if ("@ID@".endsWith("@")) {
    group = 'com.toxicstoxm.LEDSuite'
    version = '1.0.0-rc2'
} else {
    group = '@ID@'
    version = '@VERSION@'
}

repositories {
    maven { url './offline-repository/' }
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'io.github.jwharm.javagi:adw:0.11.0'

    implementation 'org.yaml:snakeyaml:2.3'

    implementation 'jakarta.websocket:jakarta.websocket-client-api:2.2.0'
    implementation 'org.glassfish.tyrus:tyrus-client:2.2.0'
    implementation 'org.glassfish.tyrus:tyrus-container-grizzly-client:2.2.0'

    compileOnly 'org.jetbrains:annotations:26.0.1'
    annotationProcessor 'org.jetbrains:annotations:26.0.1'

    implementation 'com.toxicstoxm.YAJSI:YAJSI:1.6.4'
    implementation 'com.toxicstoxm.YAJL:YAJL:1.4.3'

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    implementation 'io.github.classgraph:classgraph:4.8.179'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}

tasks.register('glibCompileResources') {
    doLast {
        exec {
            workingDir 'src/main/resources'
            commandLine 'glib-compile-resources', 'LEDSuite.gresource.xml'
        }
    }
}

tasks.named('classes') {
    dependsOn glibCompileResources
}

application {
    mainClass = 'com.toxicstoxm.LEDSuite.Main'
    mainModule = 'com.toxicstoxm.LEDSuite'
    applicationDefaultJvmArgs = [
            '--enable-native-access=org.gnome.glib',
            '--enable-native-access=org.gnome.gobject',
            '--enable-native-access=org.gnome.gio',
            '--enable-native-access=org.gnome.gdk',
            '--enable-native-access=org.gnome.gtk',
            '--enable-native-access=org.gnome.adw',
            '--enable-native-access=org.freedesktop.cairo',
            '--enable-native-access=com.toxicstoxm.LEDSuite'
    ]
}

jlink {
    options = [
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages'
    ]
    launcher {
        name = 'LEDSuite'
    }
}

tasks.flatpakGradleGenerator {
    outputFile = file('flatpak-sources.json')
    downloadDirectory = './offline-repository'
}

replaceSourcePlaceholders {
    enabled true
    filesToExpand '**/LEDSuiteApplication.java'
    extraProperties 'version'
}

tasks.jar {
    dependsOn('fatJar')
    manifest {
        attributes['Main-Class'] = 'com.toxicstoxm.LEDSuite.Main'
    }
}

tasks.register('fatJar', Jar) {
    manifest {
        attributes['Main-Class'] = 'com.toxicstoxm.LEDSuite.Main'
    }

    archiveBaseName = "${rootProject.name}-fat"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
